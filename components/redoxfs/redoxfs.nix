# Generated by carnix 0.9.8: carnix generate-nix --src .
{ lib, buildPlatform, buildRustCrate, buildRustCrateHelpers, cratesIO, fetchgit }:
with buildRustCrateHelpers;
let inherit (lib.lists) fold;
    inherit (lib.attrsets) recursiveUpdate;
in
rec {
  crates = cratesIO // rec {
# redoxfs-0.3.3

    crates.redoxfs."0.3.3" = deps: { features?(features_.redoxfs."0.3.3" deps {}) }: buildRustCrate {
      crateName = "redoxfs";
      version = "0.3.3";
      authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
      src = exclude [ ".git" "target" ] ./.;
      libPath = "src/lib.rs";
      crateBin =
        [{  name = "redoxfs";  path = "src/bin/mount.rs"; }] ++
        [{  name = "redoxfs-ar";  path = "src/bin/ar.rs"; }] ++
        [{  name = "redoxfs-mkfs";  path = "src/bin/mkfs.rs"; }];
      dependencies = mapFeatures features ([
        (cratesIO.crates."redox_syscall"."${deps."redoxfs"."0.3.3"."redox_syscall"}" deps)
        (cratesIO.crates."uuid"."${deps."redoxfs"."0.3.3"."uuid"}" deps)
      ])
        ++ (if !(kernel == "redox") then mapFeatures features ([
        (cratesIO.crates."fuse"."${deps."redoxfs"."0.3.3"."fuse"}" deps)
        (cratesIO.crates."libc"."${deps."redoxfs"."0.3.3"."libc"}" deps)
        (cratesIO.crates."time"."${deps."redoxfs"."0.3.3"."time"}" deps)
      ]) else []);
    };
    features_.redoxfs."0.3.3" = deps: f: updateFeatures f (rec {
      fuse."${deps.redoxfs."0.3.3".fuse}".default = true;
      libc."${deps.redoxfs."0.3.3".libc}".default = true;
      redox_syscall."${deps.redoxfs."0.3.3".redox_syscall}".default = true;
      redoxfs."0.3.3".default = (f.redoxfs."0.3.3".default or true);
      time."${deps.redoxfs."0.3.3".time}".default = true;
      uuid = fold recursiveUpdate {} [
        { "${deps.redoxfs."0.3.3".uuid}"."v4" = true; }
        { "${deps.redoxfs."0.3.3".uuid}".default = true; }
      ];
    }) [
      (cratesIO.features_.redox_syscall."${deps."redoxfs"."0.3.3"."redox_syscall"}" deps)
      (cratesIO.features_.uuid."${deps."redoxfs"."0.3.3"."uuid"}" deps)
      (cratesIO.features_.fuse."${deps."redoxfs"."0.3.3"."fuse"}" deps)
      (cratesIO.features_.libc."${deps."redoxfs"."0.3.3"."libc"}" deps)
      (cratesIO.features_.time."${deps."redoxfs"."0.3.3"."time"}" deps)
    ];


# end

  };

  redoxfs = crates.crates.redoxfs."0.3.3" deps;
  __all = [ (redoxfs {}) ];
  deps.cfg_if."0.1.7" = {};
  deps.fuchsia_cprng."0.1.1" = {};
  deps.fuse."0.3.1" = {
    libc = "0.2.54";
    log = "0.3.9";
    thread_scoped = "1.0.2";
    time = "0.1.42";
    pkg_config = "0.3.14";
  };
  deps.libc."0.2.54" = {};
  deps.log."0.3.9" = {
    log = "0.4.6";
  };
  deps.log."0.4.6" = {
    cfg_if = "0.1.7";
  };
  deps.pkg_config."0.3.14" = {};
  deps.rand."0.3.23" = {
    libc = "0.2.54";
    rand = "0.4.6";
  };
  deps.rand."0.4.6" = {
    rand_core = "0.3.1";
    rdrand = "0.4.0";
    fuchsia_cprng = "0.1.1";
    libc = "0.2.54";
    winapi = "0.3.7";
  };
  deps.rand_core."0.3.1" = {
    rand_core = "0.4.0";
  };
  deps.rand_core."0.4.0" = {};
  deps.rdrand."0.4.0" = {
    rand_core = "0.3.1";
  };
  deps.redox_syscall."0.1.54" = {};
  deps.redoxfs."0.3.3" = {
    redox_syscall = "0.1.54";
    uuid = "0.5.1";
    fuse = "0.3.1";
    libc = "0.2.54";
    time = "0.1.42";
  };
  deps.thread_scoped."1.0.2" = {};
  deps.time."0.1.42" = {
    libc = "0.2.54";
    redox_syscall = "0.1.54";
    winapi = "0.3.7";
  };
  deps.uuid."0.5.1" = {
    rand = "0.3.23";
  };
  deps.winapi."0.3.7" = {
    winapi_i686_pc_windows_gnu = "0.4.0";
    winapi_x86_64_pc_windows_gnu = "0.4.0";
  };
  deps.winapi_i686_pc_windows_gnu."0.4.0" = {};
  deps.winapi_x86_64_pc_windows_gnu."0.4.0" = {};
}
